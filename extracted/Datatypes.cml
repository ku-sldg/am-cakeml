type ml___dummy = unit

(** val negb : bool -> bool **)

fun negb b = case b of
  True => False
| False => True

datatype nat =
  O 
| S nat

(** val fst : ('a1 * 'a2) -> 'a1 **)

fun fst p = case p of
  (x, _) => x

(** val snd : ('a1 * 'a2) -> 'a2 **)

fun snd p = case p of
  (_, y) => y

(** val length : 'a1 list -> nat **)

fun length l = case l of
  [] => O
| _ :: l' => S (length l')

(** val app : 'a1 list -> 'a1 list -> 'a1 list **)

fun app l m =
  case l of
    [] => m
  | a :: l1 => a :: (app l1 m)

(** val id : ml___dummy -> ml___dummy **)

fun id x =
  x
