(** val am_sendReq :
    coq_Attestation_Session -> coq_Plc -> coq_Evidence -> coq_Term -> coq_Plc
    -> (coq_RawEv, string) coq_ResultT **)

fun am_sendReq att_sess req_plc e t toPlc =
  let val req = Coq_mkPRReq att_sess req_plc e t in
  let val m =
    let val Coq_mkAtt_Sess _ plc_Mapping _ _ = att_sess in plc_Mapping end
  in
  (case map_get coq_Eq_Class_ID_Type toPlc m of
     Some uuid =>
     let val js =
       let val Build_Jsonifiable to_JSON _ =
         coq_Jsonifiable_ProtocolRunRequest
           (coq_Jsonifiable_Term
             (coq_Jsonifiable_ASP coq_Jsonifiable_ASP_ARGS)
             coq_Jsonifiable_Split)
           (coq_Jsonifiable_Evidence coq_Jsonifiable_RawEv
             (coq_Jsonifiable_EvidenceT coq_Jsonifiable_ASP_ARGS
               coq_Jsonifiable_nat
               (coq_Jsonifiable_ASP_Params coq_Jsonifiable_ASP_ARGS)))
           (coq_Jsonifiable_Attestation_Session
             (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
               coq_Eq_Class_ID_Type coq_Stringifiable_UUUID)
             (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
               coq_Eq_Class_ID_Type coq_Stringifiable_PublicKey)
             (coq_Jsonifiable_GlobalContext coq_Stringifiable_ID_Type
               (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
                 coq_Eq_Class_ID_Type coq_Stringifiable_ID_Type)
               (jsonifiable_map_serial_json coq_Stringifiable_ID_Type
                 coq_Eq_Class_ID_Type
                 (coq_Jsonifiable_EvSig
                   (coq_Jsonifiable_EvOutSig coq_Jsonifiable_nat)
                   coq_Stringifiable_FWD))))
       in
       to_JSON req end
     in
     let val resp_res = make_JSON_Network_Request uuid js in
     (case resp_res of
        Coq_errC msg => Coq_errC msg
      | Coq_resultC js_res =>
        (case let val Build_Jsonifiable _ from_JSON =
                coq_Jsonifiable_ProtocolRunResponse
                  (coq_Jsonifiable_Evidence coq_Jsonifiable_RawEv
                    (coq_Jsonifiable_EvidenceT coq_Jsonifiable_ASP_ARGS
                      coq_Jsonifiable_nat
                      (coq_Jsonifiable_ASP_Params coq_Jsonifiable_ASP_ARGS)))
              in
              from_JSON js_res end of
           Coq_errC msg => Coq_errC msg
         | Coq_resultC res =>
           let val Coq_mkPRResp success prresp_Evidence = res in
           let val Coq_evc ev _ = prresp_Evidence in
           (case success of
              True => Coq_resultC ev
            | False => Coq_errC errStr_remote_am_failure) end end)) end end
   | None => Coq_errC errStr_remote_am_failure) end end

(** val am_client_app_summary :
    coq_Attestation_Session -> coq_Plc -> coq_Evidence -> coq_Term -> coq_Plc
    -> (coq_AppraisalSummary, string) coq_ResultT **)

fun am_client_app_summary att_sess req_plc e t toPlc =
  case am_sendReq att_sess req_plc e t toPlc of
    Coq_errC msg => Coq_errC msg
  | Coq_resultC rawev =>
    let val glob_ctx =
      let val Coq_mkAtt_Sess _ _ _ ats_context = att_sess in ats_context end
    in
    let val Coq_evc _ et = e in
    res_bind (eval glob_ctx toPlc et t) (fn et' =>
      do_AppraisalSummary et' rawev glob_ctx example_RawEvJudgement) end end

(** val run_resolute_id :
    coq_Term -> coq_Attestation_Session -> coq_Plc -> coq_Plc ->
    (coq_Evidence, string) coq_ResultT **)

fun run_resolute_id t att_sess req_plc toPlc =
  let val appr_t = Coq_lseq t (Coq_asp APPR) in
  res_bind (am_sendReq att_sess req_plc mt_evc appr_t toPlc) (fn rawev =>
    res_bind
      (eval
        (let val Coq_mkAtt_Sess _ _ _ ats_context = att_sess in
         ats_context end) toPlc Coq_mt_evt appr_t) (fn et' => Coq_resultC
      (Coq_evc rawev et'))) end

type coq_Term_Model =
  string -> coq_Term
  (* singleton inductive, whose constructor was Build_Term_Model *)

(** val term_conc : coq_Term_Model -> string -> coq_Term **)

fun term_conc t =
  t

(** val add_term_args : coq_Term -> coq_JSON -> coq_Term **)

fun add_term_args t args =
  case t of
    Coq_asp a =>
    (case a of
       ASPC a0 =>
       let val Coq_asp_paramsC i _ p tid = a0 in
       Coq_asp (ASPC (Coq_asp_paramsC i args p tid)) end
     | _ => Coq_asp a)
  | Coq_att q t' => Coq_att q (add_term_args t' args)
  | Coq_lseq t1 t2 => Coq_lseq (add_term_args t1 args) (add_term_args t2 args)
  | Coq_bseq s t1 t2 =>
    Coq_bseq s (add_term_args t1 args) (add_term_args t2 args)
  | Coq_bpar s t1 t2 =>
    Coq_bpar s (add_term_args t1 args) (add_term_args t2 args)

(** val good_bs : coq_BS **)

val good_bs : coq_BS =
  passed_bs

(** val judge_evidence : coq_Evidence -> bool **)

fun judge_evidence e = case e of
  Coq_evc rawev _ => forallb (fn bs => eqb coq_EqClass_BS bs good_bs) rawev

(** val am_client_do_res :
    coq_Attestation_Session -> coq_Plc -> coq_Plc -> coq_Term_Model ->
    coq_Resolute_Client_Request -> (coq_Resolute_Client_Result, string)
    coq_ResultT **)

fun am_client_do_res att_sess req_plc toPlc m req =
  let val rt =
    term_conc m
      (let val Coq_mkResoluteClientReq resclientreq_attest_id _ _ = req in
       resclientreq_attest_id end)
  in
  let val rt_w_args =
    add_term_args rt
      (let val Coq_mkResoluteClientReq _ resclientreq_args _ = req in
       resclientreq_args end)
  in
  let val maybe_ev = run_resolute_id rt_w_args att_sess req_plc toPlc in
  (case maybe_ev of
     Coq_errC errStr =>
     Coq_resultC (Coq_mkResoluteClientResult rt_w_args mt_evc False errStr)
   | Coq_resultC e =>
     let val judgement = judge_evidence e in
     Coq_resultC (Coq_mkResoluteClientResult rt_w_args e judgement "") end) end end end

(** val micro_resolute_term_model : coq_Term_Model **)

fun micro_resolute_term_model _ =
  meas_micro'

(** val micro_resolute_client_req :
    string -> coq_JSON -> string -> coq_Resolute_Client_Request **)

fun micro_resolute_client_req att_id args res_path =
  Coq_mkResoluteClientReq att_id args res_path
