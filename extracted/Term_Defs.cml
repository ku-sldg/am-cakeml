(** val splitEv_T_l : coq_Split -> coq_EvidenceT -> coq_EvidenceT **)

fun splitEv_T_l sp e =
  let val (s, _) = sp in (case s of
                            ALL => e
                          | NONE => Coq_mt_evt) end

(** val splitEv_T_r : coq_Split -> coq_EvidenceT -> coq_EvidenceT **)

fun splitEv_T_r sp e =
  let val (_, s0) = sp in (case s0 of
                             ALL => e
                           | NONE => Coq_mt_evt) end

(** val splitEv_l : coq_Split -> coq_Evidence -> coq_Evidence **)

fun splitEv_l sp e =
  let val (s, _) = sp in (case s of
                            ALL => e
                          | NONE => mt_evc) end

(** val splitEv_r : coq_Split -> coq_Evidence -> coq_Evidence **)

fun splitEv_r sp e =
  let val (_, s0) = sp in (case s0 of
                             ALL => e
                           | NONE => mt_evc) end

(** val equiv_EvidenceT :
    coq_GlobalContext -> coq_EvidenceT -> coq_EvidenceT -> bool **)

fun equiv_EvidenceT g e1 e2 =
  case et_size g e1 of
    Coq_errC _ => False
  | Coq_resultC n1 =>
    (case et_size g e2 of
       Coq_errC _ => False
     | Coq_resultC n2 => eqb nat_EqClass n1 n2)

(** val appr_procedure' :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> coq_EvidenceT ->
    (coq_EvidenceT, string) coq_ResultT **)

fun appr_procedure' g p e ev_out =
  case equiv_EvidenceT g e ev_out of
    True =>
    (case e of
       Coq_mt_evt => Coq_resultC Coq_mt_evt
     | Coq_nonce_evt _ =>
       Coq_resultC (Coq_asp_evt p check_nonce_params ev_out)
     | Coq_asp_evt _ ps e' =>
       let val Coq_asp_paramsC asp_id args targ_plc targ = ps in
       (case map_get coq_Eq_Class_ID_Type asp_id
               (let val Build_GlobalContext asp_types _ = g in asp_types end) of
          Some e0 =>
          let val Coq_ev_arrow fwd _ _ = e0 in
          (case map_get coq_Eq_Class_ID_Type asp_id
                  (let val Build_GlobalContext _ asp_comps = g in
                   asp_comps end) of
             Some appr_id =>
             let val dual_par = Coq_asp_paramsC appr_id args targ_plc targ in
             (case fwd of
                REPLACE => Coq_resultC (Coq_asp_evt p dual_par ev_out)
              | WRAP =>
                (case map_get coq_Eq_Class_ID_Type appr_id
                        (let val Build_GlobalContext asp_types _ = g in
                         asp_types end) of
                   Some e1 =>
                   let val Coq_ev_arrow f _ _ = e1 in
                   (case f of
                      UNWRAP =>
                      let val ev_out' = Coq_asp_evt p dual_par ev_out in
                      appr_procedure' g p e' ev_out' end
                    | _ => Coq_errC err_str_appr_compute_evt_neq) end
                 | None => Coq_errC err_str_asp_no_type_sig)
              | UNWRAP =>
                (case e' of
                   Coq_asp_evt _ a e'' =>
                   let val Coq_asp_paramsC asp_id' _ _ _ = a in
                   (case map_get coq_Eq_Class_ID_Type asp_id'
                           (let val Build_GlobalContext asp_types _ = g in
                            asp_types end) of
                      Some e1 =>
                      let val Coq_ev_arrow f _ _ = e1 in
                      (case f of
                         WRAP => appr_procedure' g p e'' ev_out
                       | _ => Coq_errC err_str_appr_not_originally_a_wrap) end
                    | None => Coq_errC err_str_asp_no_type_sig) end
                 | _ => Coq_errC err_str_appr_only_allow_on_asp)
              | EXTEND =>
                res_bind (appr_procedure' g p e' e') (fn ev_under =>
                  Coq_resultC (Coq_split_evt (Coq_asp_evt p dual_par ev_out)
                  ev_under))) end
           | None => Coq_errC err_str_asp_no_compat_appr_asp) end
        | None => Coq_errC err_str_asp_no_type_sig) end
     | Coq_left_evt e' =>
       res_bind
         (apply_to_left_evt g (fn e'0 => appr_procedure' g p e'0 ev_out) e')
         (fn r => r)
     | Coq_right_evt e' =>
       res_bind
         (apply_to_right_evt g (fn e'0 => appr_procedure' g p e'0 ev_out) e')
         (fn r => r)
     | Coq_split_evt e1 e2 =>
       res_bind (appr_procedure' g p e1 (Coq_left_evt ev_out)) (fn e1' =>
         res_bind (appr_procedure' g p e2 (Coq_right_evt ev_out)) (fn e2' =>
           Coq_resultC (Coq_split_evt e1' e2'))))
  | False => Coq_errC err_str_appr_compute_evt_neq

(** val appr_procedure :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> (coq_EvidenceT, string)
    coq_ResultT **)

fun appr_procedure g p e =
  appr_procedure' g p e e

(** val eval_asp :
    coq_GlobalContext -> coq_ASP -> coq_Plc -> coq_EvidenceT ->
    (coq_EvidenceT, string) coq_ResultT **)

fun eval_asp g a p e =
  case a of
    NULL => Coq_resultC Coq_mt_evt
  | ASPC params => Coq_resultC (Coq_asp_evt p params e)
  | SIG => Coq_resultC (Coq_asp_evt p sig_params e)
  | HSH => Coq_resultC (Coq_asp_evt p hsh_params e)
  | APPR => appr_procedure g p e
  | ENC q => Coq_resultC (Coq_asp_evt p (enc_params q) e)

(** val eval :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> coq_Term ->
    (coq_EvidenceT, string) coq_ResultT **)

fun eval g p e t = case t of
  Coq_asp a => eval_asp g a p e
| Coq_att q t1 => eval g q e t1
| Coq_lseq t1 t2 => res_bind (eval g p e t1) (fn e1 => eval g p e1 t2)
| Coq_bseq s t1 t2 =>
  res_bind (eval g p (splitEv_T_l s e) t1) (fn e1 =>
    res_bind (eval g p (splitEv_T_r s e) t2) (fn e2 => Coq_resultC
      (Coq_split_evt e1 e2)))
| Coq_bpar s t1 t2 =>
  res_bind (eval g p (splitEv_T_l s e) t1) (fn e1 =>
    res_bind (eval g p (splitEv_T_r s e) t2) (fn e2 => Coq_resultC
      (Coq_split_evt e1 e2)))

datatype coq_Ev =
  Coq_null nat coq_Plc
| Coq_umeas nat coq_Plc coq_ASP_PARAMS coq_EvidenceT
| Coq_req nat coq_Plc coq_Plc coq_EvidenceT coq_Term
| Coq_rpy nat coq_Plc coq_Plc coq_EvidenceT
| Coq_split nat coq_Plc
| Coq_join nat coq_Plc
| Coq_cvm_thread_start nat coq_Loc coq_Plc coq_EvidenceT coq_Term
| Coq_cvm_thread_end nat coq_Loc

(** val appr_events_size :
    coq_GlobalContext -> coq_EvidenceT -> (nat, string) coq_ResultT **)

fun appr_events_size g e = case e of
  Coq_mt_evt => Coq_resultC O
| Coq_nonce_evt _ => Coq_resultC (S O)
| Coq_asp_evt _ par e' =>
  let val Coq_asp_paramsC asp_id _ _ _ = par in
  (case map_get coq_Eq_Class_ID_Type asp_id
          (let val Build_GlobalContext asp_types _ = g in asp_types end) of
     Some e0 =>
     let val Coq_ev_arrow asp_fwd _ _ = e0 in
     (case asp_fwd of
        REPLACE => Coq_resultC (S O)
      | WRAP =>
        res_bind (appr_events_size g e') (fn n => Coq_resultC (add (S O) n))
      | UNWRAP => appr_events_size g e'
      | EXTEND =>
        res_bind (appr_events_size g e') (fn n => Coq_resultC
          (add (S (S (S O))) n))) end
   | None => Coq_errC err_str_asp_no_type_sig) end
| Coq_left_evt e' =>
  res_bind (apply_to_left_evt g (appr_events_size g) e') (fn r => r)
| Coq_right_evt e' =>
  res_bind (apply_to_right_evt g (appr_events_size g) e') (fn r => r)
| Coq_split_evt e1 e2 =>
  res_bind (appr_events_size g e1) (fn s1 =>
    res_bind (appr_events_size g e2) (fn s2 => Coq_resultC
      (add (add (S (S O)) s1) s2)))

(** val events_size :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> coq_Term -> (nat,
    string) coq_ResultT **)

fun events_size g p e t = case t of
  Coq_asp a =>
  (case a of
     APPR => appr_events_size g e
   | _ => Coq_resultC (S O))
| Coq_att p' t1 =>
  res_bind (events_size g p' e t1) (fn e' => Coq_resultC (add (S (S O)) e'))
| Coq_lseq t1 t2 =>
  res_bind (events_size g p e t1) (fn e1 =>
    res_bind (eval g p e t1) (fn e' =>
      res_bind (events_size g p e' t2) (fn e2 => Coq_resultC (add e1 e2))))
| Coq_bseq s t1 t2 =>
  res_bind (events_size g p (splitEv_T_l s e) t1) (fn e1 =>
    res_bind (events_size g p (splitEv_T_r s e) t2) (fn e2 => Coq_resultC
      (add (add (S (S O)) e1) e2)))
| Coq_bpar s t1 t2 =>
  res_bind (events_size g p (splitEv_T_l s e) t1) (fn e1 =>
    res_bind (events_size g p (splitEv_T_r s e) t2) (fn e2 => Coq_resultC
      (add (add (S (S (S (S O)))) e1) e2)))

(** val appr_events' :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> coq_EvidenceT -> nat ->
    (coq_Ev list, string) coq_ResultT **)

fun appr_events' g p e ev_out i =
  case e of
    Coq_mt_evt => Coq_resultC []
  | Coq_nonce_evt _ =>
    Coq_resultC ((Coq_umeas i p check_nonce_params ev_out) :: [])
  | Coq_asp_evt _ ps e' =>
    let val Coq_asp_paramsC asp_id args targ_plc targ = ps in
    (case map_get coq_Eq_Class_ID_Type asp_id
            (let val Build_GlobalContext _ asp_comps = g in asp_comps end) of
       Some appr_id =>
       let val dual_par = Coq_asp_paramsC appr_id args targ_plc targ in
       (case map_get coq_Eq_Class_ID_Type asp_id
               (let val Build_GlobalContext asp_types _ = g in asp_types end) of
          Some e0 =>
          let val Coq_ev_arrow fwd _ _ = e0 in
          (case fwd of
             REPLACE => Coq_resultC ((Coq_umeas i p dual_par ev_out) :: [])
           | WRAP =>
             let val unwrap_ev = Coq_umeas i p dual_par ev_out in
             let val new_ev_out = Coq_asp_evt p dual_par ev_out in
             res_bind (appr_events' g p e' new_ev_out (add i (S O)))
               (fn ev' => Coq_resultC (unwrap_ev :: ev')) end end
           | UNWRAP => appr_events' g p e' ev_out i
           | EXTEND =>
             res_bind (appr_events' g p e' e' (add i (S (S O)))) (fn ev' =>
               Coq_resultC
               (app ((Coq_split i p) :: [])
                 (app ((Coq_umeas (add i (S O)) p dual_par ev_out) :: [])
                   (app ev' ((Coq_join (add (add i (S (S O))) (length ev'))
                     p) :: [])))))) end
        | None => Coq_errC err_str_asp_no_type_sig) end
     | None => Coq_errC err_str_asp_no_compat_appr_asp) end
  | Coq_left_evt e' =>
    res_bind
      (apply_to_left_evt g (fn e'0 => appr_events' g p e'0 ev_out i) e')
      (fn r => r)
  | Coq_right_evt e' =>
    res_bind
      (apply_to_right_evt g (fn e'0 => appr_events' g p e'0 ev_out i) e')
      (fn r => r)
  | Coq_split_evt e1 e2 =>
    (case ev_out of
       Coq_split_evt e1' e2' =>
       res_bind (appr_events' g p e1 e1' (add i (S O))) (fn e1'0 =>
         let val next_i = add (add i (S O)) (length e1'0) in
         res_bind (appr_events' g p e2 e2' next_i) (fn e2'0 =>
           let val last_i = add next_i (length e2'0) in
           Coq_resultC
           (app ((Coq_split i p) :: [])
             (app e1'0 (app e2'0 ((Coq_join last_i p) :: [])))) end) end)
     | _ => Coq_errC err_str_split_evidence_not_split)

(** val appr_events :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> nat -> (coq_Ev list,
    string) coq_ResultT **)

fun appr_events g p e i =
  appr_events' g p e e i

(** val asp_events :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> coq_ASP -> nat ->
    (coq_Ev list, string) coq_ResultT **)

fun asp_events g p e a i =
  case a of
    NULL => Coq_resultC ((Coq_null i p) :: [])
  | ASPC ps => Coq_resultC ((Coq_umeas i p ps e) :: [])
  | SIG => Coq_resultC ((Coq_umeas i p sig_params e) :: [])
  | HSH => Coq_resultC ((Coq_umeas i p hsh_params e) :: [])
  | APPR => appr_events g p e i
  | ENC q => Coq_resultC ((Coq_umeas i p (enc_params q) e) :: [])
