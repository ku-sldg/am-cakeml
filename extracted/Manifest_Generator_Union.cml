type coq_Term_Plc_list = (coq_Term * coq_Plc) list

(** val coq_Term_Plc_list_to_JSON :
    coq_Term coq_Jsonifiable -> coq_Term_Plc_list -> coq_JSON **)

fun coq_Term_Plc_list_to_JSON h ls =
  JSON_Object ((term_plc_list_name_constant, (JSON_Array
    (map (fn pat =>
      let val (et, p) = pat in
      JSON_Array
      ((let val Build_Jsonifiable to_JSON _ = h in to_JSON et end) :: ((JSON_String
      (let val Build_Stringifiable to_string _ = coq_Stringifiable_ID_Type in
       to_string p end)) :: [])) end) ls))) :: [])

(** val coq_Term_Plc_list_from_JSON :
    coq_Term coq_Jsonifiable -> coq_JSON -> (coq_Term_Plc_list, string)
    coq_ResultT **)

fun coq_Term_Plc_list_from_JSON h js =
  case coq_JSON_get_Array term_plc_list_name_constant js of
    Coq_errC e => Coq_errC e
  | Coq_resultC jsArr =>
    result_map (fn js0 =>
      case js0 of
        JSON_Object _ =>
        Coq_errC err_str_json_parsing_failure_wrong_number_args
      | JSON_Array l =>
        (case l of
           [] => Coq_errC err_str_json_parsing_failure_wrong_number_args
         | jsTerm :: l0 =>
           (case l0 of
              [] => Coq_errC err_str_json_parsing_failure_wrong_number_args
            | j :: l1 =>
              (case j of
                 JSON_Object _ =>
                 Coq_errC err_str_json_parsing_failure_wrong_number_args
               | JSON_Array _ =>
                 Coq_errC err_str_json_parsing_failure_wrong_number_args
               | JSON_String jsP =>
                 (case l1 of
                    [] =>
                    res_bind
                      (let val Build_Jsonifiable _ from_JSON = h in
                       from_JSON jsTerm end) (fn et =>
                      res_bind
                        (let val Build_Stringifiable _ from_string =
                           coq_Stringifiable_ID_Type
                         in
                         from_string jsP end) (fn p => Coq_resultC (et, p)))
                  | _ :: _ =>
                    Coq_errC err_str_json_parsing_failure_wrong_number_args)
               | JSON_Boolean _ =>
                 Coq_errC err_str_json_parsing_failure_wrong_number_args)))
      | _ => Coq_errC err_str_json_parsing_failure_wrong_number_args) jsArr

(** val coq_Jsonifiable_Term_Plc_list :
    coq_Term coq_Jsonifiable -> coq_Term_Plc_list coq_Jsonifiable **)

fun coq_Jsonifiable_Term_Plc_list h =
  Build_Jsonifiable (coq_Term_Plc_list_to_JSON h)
    (coq_Term_Plc_list_from_JSON h)

(** val end_to_end_mangen :
    coq_GlobalContext -> coq_Term_Plc_list -> (coq_EnvironmentM, string)
    coq_ResultT **)

fun end_to_end_mangen g ts =
  result_fold (fn pat => fn _ =>
    let val (t, p) = pat in manifest_generator g p t end) e_empty ts
