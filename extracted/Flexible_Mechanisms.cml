(** val certificate_style : coq_Term **)

val certificate_style : coq_Term =
  Coq_att coq_P1 (Coq_lseq (Coq_asp (ASPC (Coq_asp_paramsC attest_id []
    coq_P1 sys_targ))) (Coq_att coq_P2 (Coq_lseq (Coq_asp (ASPC
    (Coq_asp_paramsC appraise_id [] coq_P2 sys_targ))) (Coq_asp (ASPC
    (Coq_asp_paramsC certificate_id [] coq_P2 sys_targ))))))

(** val background_check : coq_Term **)

val background_check : coq_Term =
  Coq_lseq (Coq_att coq_P1 (Coq_asp (ASPC (Coq_asp_paramsC attest_id []
    coq_P1 sys_targ)))) (Coq_att coq_P2 (Coq_asp (ASPC (Coq_asp_paramsC
    appraise_id [] coq_P2 sys_targ))))

(** val parallel_mutual_1 : coq_Term **)

val parallel_mutual_1 : coq_Term =
  Coq_att coq_P1 (Coq_lseq (Coq_asp (ASPC (Coq_asp_paramsC attest_id []
    coq_P1 sys_targ))) (Coq_att coq_P2 (Coq_asp (ASPC (Coq_asp_paramsC
    appraise_id [] coq_P2 sys_targ)))))

(** val parallel_mutual_2 : coq_Term **)

val parallel_mutual_2 : coq_Term =
  Coq_att coq_P0 (Coq_lseq (Coq_asp (ASPC (Coq_asp_paramsC attest_id []
    coq_P0 sys_targ))) (Coq_att coq_P2 (Coq_asp (ASPC (Coq_asp_paramsC
    appraise_id [] coq_P2 sys_targ)))))

(** val layered_background_check : coq_Term **)

val layered_background_check : coq_Term =
  Coq_att coq_P1 (Coq_bpar (ALL, ALL) (Coq_lseq (Coq_att coq_P1 (Coq_asp
    (ASPC (Coq_asp_paramsC attest_id [] coq_P1 sys_targ)))) (Coq_lseq
    (Coq_asp (ASPC (Coq_asp_paramsC attest_id [] coq_P3 att_targ))) (Coq_asp
    (ASPC (Coq_asp_paramsC attest_id [] coq_P4 att_targ))))) (Coq_bpar (ALL,
    ALL) (Coq_att coq_P3 (Coq_asp (ASPC (Coq_asp_paramsC attest_id [] coq_P3
    sys_targ)))) (Coq_lseq (Coq_att coq_P4 (Coq_asp (ASPC (Coq_asp_paramsC
    attest_id [] coq_P4 sys_targ)))) (Coq_att coq_P2 (Coq_lseq (Coq_asp (ASPC
    (Coq_asp_paramsC appraise_id [] coq_P2 it_targ))) (Coq_asp (ASPC
    sig_params)))))))

(** val filehash_auth_phrase : coq_Term **)

val filehash_auth_phrase : coq_Term =
  Coq_att coq_P1 (Coq_lseq (Coq_asp (ASPC (Coq_asp_paramsC hashfile_id []
    coq_P1 hashfile_targ))) (Coq_asp SIG))

(** val split_phrase : coq_Term **)

val split_phrase : coq_Term =
  Coq_att coq_P1 (Coq_bseq (ALL, ALL) (Coq_asp (ASPC (Coq_asp_paramsC
    attest1_id [] coq_P1 sys_targ))) (Coq_asp (ASPC (Coq_asp_paramsC
    attest2_id [] coq_P1 sys_targ))))

(** val large_output_asp_test : coq_Term **)

val large_output_asp_test : coq_Term =
  Coq_asp (ASPC (Coq_asp_paramsC large_output_id [] coq_P1 sys_targ))

(** val appr_term : coq_Term **)

val appr_term : coq_Term =
  Coq_asp APPR

(** val meas_cds : coq_Term **)

val meas_cds : coq_Term =
  Coq_bseq (ALL, ALL) gather_config_1 (Coq_bseq (ALL, ALL) selinux_hash_pol
    (Coq_bseq (ALL, ALL) hash_cds_img_1 (Coq_bseq (ALL, ALL) hash_cds_img_2
    (Coq_bseq (ALL, ALL) gather_config_1 gather_config_2))))

(** val hash_micro_config_1 : coq_Term **)

val hash_micro_config_1 : coq_Term =
  hash_targ_asp cds_config_dir_plc cds_img_1_targ path_micro_targ1
    path_micro_targ1_golden

(** val hash_micro_config_2 : coq_Term **)

val hash_micro_config_2 : coq_Term =
  hash_targ_asp cds_config_dir_plc cds_img_2_targ path_micro_targ2
    path_micro_targ2_golden

(** val hash_micro_evidence : coq_Term **)

val hash_micro_evidence : coq_Term =
  hash_evidence_asp cds_config_dir_plc cds_img_3_targ
    path_micro_composite_golden

(** val meas_micro : coq_Term **)

val meas_micro : coq_Term =
  Coq_lseq (Coq_bseq (ALL, ALL) hash_micro_config_1 hash_micro_config_2)
    hash_micro_evidence

(** val micro_appTerm : coq_Term **)

val micro_appTerm : coq_Term =
  Coq_lseq meas_micro appr_term

(** val example_appTerm : coq_Term **)

val example_appTerm : coq_Term =
  Coq_lseq meas_cds appr_term

(** val cds_ssl : coq_Term **)

val cds_ssl : coq_Term =
  Coq_lseq (Coq_bseq (ALL, ALL) query_kim_asp meas_cds) (Coq_lseq
    r_ssl_sig_asp appr_term)

(** val cds_tpm : coq_Term **)

val cds_tpm : coq_Term =
  Coq_lseq (Coq_bseq (ALL, ALL) query_kim_asp meas_cds) (Coq_lseq
    r_tpm_sig_asp appr_term)

(** val provision_micro_hash_1 : coq_Term **)

val provision_micro_hash_1 : coq_Term =
  provision_targ_asp cds_config_dir_plc cds_config_1_targ
    path_micro_targ1_golden

(** val provision_micro_hash_2 : coq_Term **)

val provision_micro_hash_2 : coq_Term =
  provision_targ_asp cds_config_dir_plc cds_config_1_targ
    path_micro_targ2_golden

(** val provision_micro_hash_composite : coq_Term **)

val provision_micro_hash_composite : coq_Term =
  provision_targ_asp cds_config_dir_plc cds_config_1_targ
    path_micro_composite_golden

(** val micro_appTerm_provision : coq_Term **)

val micro_appTerm_provision : coq_Term =
  Coq_bseq (ALL, ALL) (Coq_lseq hash_micro_config_1 provision_micro_hash_1)
    (Coq_bseq (ALL, ALL) (Coq_lseq hash_micro_config_2
    provision_micro_hash_2) (Coq_lseq meas_micro
    provision_micro_hash_composite))

(** val example_appTerm_provision : coq_Term **)

val example_appTerm_provision : coq_Term =
  Coq_bseq (ALL, ALL) (Coq_lseq gather_config_1 provision_config_1) (Coq_bseq
    (ALL, ALL) (Coq_lseq gather_config_2 provision_config_2) (Coq_bseq (ALL,
    ALL) (Coq_lseq hash_cds_img_1 provision_img_1) (Coq_lseq hash_cds_img_2
    provision_img_2)))

(** val simple_sig : coq_Term **)

val simple_sig : coq_Term =
  Coq_lseq (Coq_lseq (Coq_asp (ASPC (Coq_asp_paramsC attest_id [] coq_P1
    sys_targ))) r_ssl_sig_asp) appr_term

(** val flexible_mechanisms_map : (string * coq_Term) list **)

val flexible_mechanisms_map : (string * coq_Term) list =
  ("cert", certificate_style) :: (("cert_appr", (Coq_lseq certificate_style
    (Coq_asp APPR))) :: (("bg", background_check) :: (("split",
    split_phrase) :: (("split_appr", (Coq_lseq split_phrase (Coq_asp
    APPR))) :: (("parmut", parallel_mutual_1) :: (("parmut2",
    parallel_mutual_2) :: (("layered_bg",
    layered_background_check) :: (("filehash",
    filehash_auth_phrase) :: (("large_output",
    large_output_asp_test) :: (("cds_simple",
    example_appTerm) :: (("cds_ssl", cds_ssl) :: (("cds_tpm",
    cds_tpm) :: (("cds_provision",
    example_appTerm_provision) :: (("simple_sig", simple_sig) :: (("micro",
    micro_appTerm) :: (("micro_provision",
    micro_appTerm_provision) :: []))))))))))))))))

(** val add_EvidenceT_flexible_mechanisms :
    coq_GlobalContext -> (string, coq_Term * (coq_EvidenceT, string)
    coq_ResultT) coq_Map **)

fun add_EvidenceT_flexible_mechanisms g =
  map_map coq_Eq_Class_ID_Type (fn t => (t,
    (eval g coq_P0 (Coq_nonce_evt O) t))) flexible_mechanisms_map

(** val full_flexible_mechanisms :
    coq_GlobalContext -> (string, coq_Term * (coq_EvidenceT, string)
    coq_ResultT) coq_Map **)

val full_flexible_mechanisms : (coq_GlobalContext -> (string,
                               coq_Term * (coq_EvidenceT, string)
                               coq_ResultT) coq_Map) =
  add_EvidenceT_flexible_mechanisms
