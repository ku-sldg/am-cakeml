datatype coq_Attestation_Session =
  Coq_mkAtt_Sess coq_Plc ((coq_Plc, coq_UUID) coq_Map)
   ((coq_Plc, coq_PublicKey) coq_Map) coq_GlobalContext

datatype coq_DispatcherErrors =
  Unavailable 
| Runtime string

type 'errType coq_ASPCallback =
  coq_ASP_PARAMS -> coq_RawEv -> (coq_RawEv, 'errType) coq_ResultT

type coq_PolicyT = (coq_Plc * coq_ASP_ID) list

datatype coq_Session_Config =
  Build_Session_Config coq_Plc coq_GlobalContext
   (coq_DispatcherErrors coq_ASPCallback) ((coq_Plc, coq_UUID) coq_Map)
   ((coq_Plc, coq_PublicKey) coq_Map) coq_PolicyT

(** val coq_Jsonifiable_Attestation_Session :
    (coq_Plc, coq_UUID) coq_Map coq_Jsonifiable -> (coq_Plc, coq_PublicKey)
    coq_Map coq_Jsonifiable -> coq_GlobalContext coq_Jsonifiable ->
    coq_Attestation_Session coq_Jsonifiable **)

fun coq_Jsonifiable_Attestation_Session h h0 h1 =
  Build_Jsonifiable (fn v => JSON_Object ((coq_STR_Session_Plc, (JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_ID_Type in
     to_string
       (let val Coq_mkAtt_Sess session_Plc _ _ _ = v in session_Plc end) end))) :: ((coq_STR_Plc_Mapping,
    (let val Build_Jsonifiable to_JSON _ = h in
     to_JSON (let val Coq_mkAtt_Sess _ plc_Mapping _ _ = v in plc_Mapping end) end)) :: ((coq_STR_PubKey_Mapping,
    (let val Build_Jsonifiable to_JSON _ = h0 in
     to_JSON
       (let val Coq_mkAtt_Sess _ _ pubKey_Mapping _ = v in pubKey_Mapping end) end)) :: ((coq_STR_Session_Context,
    (let val Build_Jsonifiable to_JSON _ = h1 in
     to_JSON (let val Coq_mkAtt_Sess _ _ _ ats_context = v in ats_context end) end)) :: [])))))
    (fn j =>
    res_bind (coq_JSON_get_string coq_STR_Session_Plc j) (fn plc =>
      res_bind (coq_JSON_get_Object coq_STR_Plc_Mapping j) (fn plc_map =>
        res_bind (coq_JSON_get_Object coq_STR_PubKey_Mapping j)
          (fn pub_map =>
          res_bind (coq_JSON_get_Object coq_STR_Session_Context j) (fn sc =>
            res_bind
              (let val Build_Stringifiable _ from_string =
                 coq_Stringifiable_ID_Type
               in
               from_string plc end) (fn plc' =>
              res_bind
                (let val Build_Jsonifiable _ from_JSON = h in
                 from_JSON plc_map end) (fn plc_map' =>
                res_bind
                  (let val Build_Jsonifiable _ from_JSON = h0 in
                   from_JSON pub_map end) (fn pub_map' =>
                  res_bind
                    (let val Build_Jsonifiable _ from_JSON = h1 in
                     from_JSON sc end) (fn sc0 => Coq_resultC (Coq_mkAtt_Sess
                    plc' plc_map' pub_map' sc0))))))))))
