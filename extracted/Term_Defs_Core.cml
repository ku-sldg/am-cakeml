type coq_Plc = coq_ID_Type

type coq_N_ID = nat

type coq_Event_ID = nat

type coq_ASP_ID = coq_ID_Type

type coq_ASP_Compat_MapT = (coq_ASP_ID, coq_ASP_ID) coq_Map

type coq_ASP_ARGS = (string, string) coq_Map

type coq_TARG_ID = coq_ID_Type

datatype coq_ASP_PARAMS =
  Coq_asp_paramsC coq_ASP_ID coq_ASP_ARGS coq_Plc coq_TARG_ID

datatype coq_FWD =
  REPLACE 
| WRAP 
| UNWRAP 
| EXTEND 

datatype coq_EvInSig =
  InAll 
| InNone 

datatype coq_EvOutSig =
  OutN nat
| OutUnwrap 

datatype coq_EvSig =
  Coq_ev_arrow coq_FWD coq_EvInSig coq_EvOutSig

datatype coq_EvidenceT =
  Coq_mt_evt 
| Coq_nonce_evt coq_N_ID
| Coq_asp_evt coq_Plc coq_ASP_PARAMS coq_EvidenceT
| Coq_left_evt coq_EvidenceT
| Coq_right_evt coq_EvidenceT
| Coq_split_evt coq_EvidenceT coq_EvidenceT

datatype coq_SP =
  ALL 
| NONE 

datatype coq_ASP =
  NULL 
| ASPC coq_ASP_PARAMS
| SIG 
| HSH 
| APPR 
| ENC coq_Plc

type coq_ASP_Type_Env = (coq_ASP_ID, coq_EvSig) coq_Map

datatype coq_GlobalContext =
  Build_GlobalContext coq_ASP_Type_Env coq_ASP_Compat_MapT

type coq_Split = coq_SP * coq_SP

datatype coq_Term =
  Coq_asp coq_ASP
| Coq_att coq_Plc coq_Term
| Coq_lseq coq_Term coq_Term
| Coq_bseq coq_Split coq_Term coq_Term
| Coq_bpar coq_Split coq_Term coq_Term

type coq_RawEv = coq_BS list

datatype coq_Evidence =
  Coq_evc coq_RawEv coq_EvidenceT

(** val mt_evc : coq_Evidence **)

val mt_evc : coq_Evidence =
  Coq_evc [] Coq_mt_evt

(** val get_et : coq_Evidence -> coq_EvidenceT **)

fun get_et e = case e of
  Coq_evc _ et => et

(** val get_bits : coq_Evidence -> coq_BS list **)

fun get_bits e = case e of
  Coq_evc ls _ => ls

type coq_Loc = nat
