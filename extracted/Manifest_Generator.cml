(** val aspid_manifest_update :
    coq_ASP_ID -> coq_Manifest -> coq_Manifest **)

fun aspid_manifest_update i m =
  let val Build_Manifest oldasps oldFSMap oldPolicy = m in
  Build_Manifest (manset_add coq_Eq_Class_ID_Type i oldasps) oldFSMap
  oldPolicy end

(** val appr_manifest_update :
    coq_GlobalContext -> coq_EvidenceT -> coq_Manifest -> (coq_Manifest,
    string) coq_ResultT **)

fun appr_manifest_update g e m =
  case e of
    Coq_mt_evt => Coq_resultC m
  | Coq_nonce_evt _ => Coq_resultC (aspid_manifest_update check_nonce_aspid m)
  | Coq_asp_evt _ ps _ =>
    let val Coq_asp_paramsC asp_id _ _ _ = ps in
    (case map_get coq_Eq_Class_ID_Type asp_id
            (let val Build_GlobalContext _ asp_comps = g in asp_comps end) of
       Some appr_asp_id => Coq_resultC (aspid_manifest_update appr_asp_id m)
     | None => Coq_errC err_str_asp_no_compat_appr_asp) end
  | Coq_left_evt e' =>
    res_bind (apply_to_left_evt g (fn e0 => appr_manifest_update g e0 m) e')
      (fn res => res)
  | Coq_right_evt e' =>
    res_bind (apply_to_right_evt g (fn e0 => appr_manifest_update g e0 m) e')
      (fn res => res)
  | Coq_split_evt e1 e2 =>
    res_bind (appr_manifest_update g e1 m) (fn m1 =>
      appr_manifest_update g e2 m1)

(** val asp_manifest_update :
    coq_GlobalContext -> coq_EvidenceT -> coq_ASP -> coq_Manifest ->
    (coq_Manifest, string) coq_ResultT **)

fun asp_manifest_update g e a m =
  case a of
    NULL => Coq_resultC m
  | ASPC a0 =>
    let val Coq_asp_paramsC i _ _ _ = a0 in
    Coq_resultC (aspid_manifest_update i m) end
  | SIG => Coq_resultC (aspid_manifest_update sig_aspid m)
  | HSH => Coq_resultC (aspid_manifest_update hsh_aspid m)
  | APPR => appr_manifest_update g e m
  | ENC _ => Coq_resultC (aspid_manifest_update enc_aspid m)

(** val manifest_update_env_res :
    coq_Plc -> coq_EnvironmentM -> (coq_Manifest -> (coq_Manifest, string)
    coq_ResultT) -> (coq_EnvironmentM, string) coq_ResultT **)

fun manifest_update_env_res p e f =
  let val m =
    case map_get coq_Eq_Class_ID_Type p e of
      Some mm => mm
    | None => empty_Manifest
  in
  (case f m of
     Coq_errC e0 => Coq_errC e0
   | Coq_resultC m' => Coq_resultC (map_set coq_Eq_Class_ID_Type p m' e)) end

(** val manifest_generator' :
    coq_GlobalContext -> coq_Plc -> coq_EvidenceT -> coq_Term ->
    coq_EnvironmentM -> (coq_EnvironmentM, string) coq_ResultT **)

fun manifest_generator' g p et t e =
  case t of
    Coq_asp a => manifest_update_env_res p e (asp_manifest_update g et a)
  | Coq_att q t' =>
    (case map_get coq_Eq_Class_ID_Type p e of
       Some _ => manifest_generator' g q et t' e
     | None => manifest_generator' g q et t' ((p, empty_Manifest) :: e))
  | Coq_lseq t1 t2 =>
    res_bind (manifest_generator' g p et t1 e) (fn e' =>
      res_bind (eval g p et t1) (fn et' => manifest_generator' g p et' t2 e'))
  | Coq_bseq _ t1 t2 =>
    res_bind (manifest_generator' g p et t1 e) (fn e' =>
      manifest_generator' g p et t2 e')
  | Coq_bpar _ t1 t2 =>
    res_bind (manifest_generator' g p et t1 e) (fn e' =>
      manifest_generator' g p et t2 e')

(** val manifest_generator :
    coq_GlobalContext -> coq_Plc -> coq_Term -> (coq_EnvironmentM, string)
    coq_ResultT **)

fun manifest_generator g p t =
  res_bind (eval g p Coq_mt_evt t) (fn et =>
    manifest_generator' g p et t e_empty)
