(** val coq_Jsonifiable_ASP_ARGS : coq_ASP_ARGS coq_Jsonifiable **)

val coq_Jsonifiable_ASP_ARGS : coq_ASP_ARGS coq_Jsonifiable =
  Build_Jsonifiable (fn x => x) (fn x => Coq_resultC x)

(** val coq_ASP_PARAMS_to_JSON :
    coq_ASP_ARGS coq_Jsonifiable -> coq_ASP_PARAMS -> coq_JSON **)

fun coq_ASP_PARAMS_to_JSON h t = case t of
  Coq_asp_paramsC asp_id args plc targ_id =>
  JSON_Object ((coq_STR_ASP_ID, (JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_ID_Type in
     to_string asp_id end))) :: ((coq_STR_ASP_ARGS,
    (let val Build_Jsonifiable to_JSON _ = h in to_JSON args end)) :: ((coq_STR_ASP_PLC,
    (JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_ID_Type in
     to_string plc end))) :: ((coq_STR_ASP_TARG_ID, (JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_ID_Type in
     to_string targ_id end))) :: []))))

(** val coq_ASP_PARAMS_from_JSON :
    coq_ASP_ARGS coq_Jsonifiable -> coq_JSON -> (coq_ASP_PARAMS, string)
    coq_ResultT **)

fun coq_ASP_PARAMS_from_JSON h js =
  res_bind (coq_JSON_get_string coq_STR_ASP_ID js) (fn asp_id =>
    res_bind (coq_JSON_get_Object coq_STR_ASP_ARGS js) (fn args =>
      res_bind (coq_JSON_get_string coq_STR_ASP_PLC js) (fn plc =>
        res_bind (coq_JSON_get_string coq_STR_ASP_TARG_ID js) (fn targ =>
          res_bind
            (let val Build_Stringifiable _ from_string =
               coq_Stringifiable_ID_Type
             in
             from_string asp_id end) (fn asp_id' =>
            res_bind
              (let val Build_Jsonifiable _ from_JSON = h in from_JSON args end)
              (fn args' =>
              res_bind
                (let val Build_Stringifiable _ from_string =
                   coq_Stringifiable_ID_Type
                 in
                 from_string plc end) (fn plc' =>
                res_bind
                  (let val Build_Stringifiable _ from_string =
                     coq_Stringifiable_ID_Type
                   in
                   from_string targ end) (fn targ' => Coq_resultC
                  (Coq_asp_paramsC asp_id' args' plc' targ')))))))))

(** val coq_Jsonifiable_ASP_Params :
    coq_ASP_ARGS coq_Jsonifiable -> coq_ASP_PARAMS coq_Jsonifiable **)

fun coq_Jsonifiable_ASP_Params h =
  Build_Jsonifiable (coq_ASP_PARAMS_to_JSON h) (coq_ASP_PARAMS_from_JSON h)

(** val noArgConstructor_to_JSON : string -> string -> coq_JSON **)

fun noArgConstructor_to_JSON type_name cons_name =
  JSON_Object
    (((String.^ type_name (String.^ type_sep type_string_constant)),
    (JSON_String cons_name)) :: [])

(** val oneArgConstructor_to_JSON :
    string -> string -> coq_JSON -> coq_JSON **)

fun oneArgConstructor_to_JSON type_name cons_name inner =
  JSON_Object
    (((String.^ type_name (String.^ type_sep type_string_constant)),
    (JSON_String
    cons_name)) :: (((String.^ type_name
                       (String.^ type_sep body_string_constant)),
    inner) :: []))

(** val multiArgConstructor_to_JSON :
    string -> string -> coq_JSON list -> coq_JSON **)

fun multiArgConstructor_to_JSON type_name cons_name ls =
  JSON_Object
    (((String.^ type_name (String.^ type_sep type_string_constant)),
    (JSON_String
    cons_name)) :: (((String.^ type_name
                       (String.^ type_sep body_string_constant)), (JSON_Array
    ls)) :: []))

(** val constructor_to_JSON :
    string -> string -> coq_JSON list -> coq_JSON **)

fun constructor_to_JSON type_name cons_name ls = case ls of
  [] => noArgConstructor_to_JSON type_name cons_name
| v :: l =>
  (case l of
     [] => oneArgConstructor_to_JSON type_name cons_name v
   | _ :: _ => multiArgConstructor_to_JSON type_name cons_name ls)

(** val coq_Jsonifiable_nat : nat coq_Jsonifiable **)

val coq_Jsonifiable_nat : nat coq_Jsonifiable =
  Build_Jsonifiable (fn s => JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_nat in
     to_string s end)) (fn js =>
    case js of
      JSON_String natString =>
      (case let val Build_Stringifiable _ from_string = coq_Stringifiable_nat
            in
            from_string natString end of
         Coq_errC _ => Coq_errC err_str_json_cannot_interp_nat
       | Coq_resultC s => Coq_resultC s)
    | _ => Coq_errC err_str_json_nat_string)

(** val constructor_body_from_JSON_gen :
    string -> coq_JSON -> coq_JSON list **)

fun constructor_body_from_JSON_gen type_name js =
  case coq_JSON_get_Object
         (String.^ type_name (String.^ type_sep body_string_constant)) js of
    Coq_errC _ => []
  | Coq_resultC jv => (case jv of
                         JSON_Array ls => ls
                       | _ => jv :: [])

(** val from_JSON_gen :
    string -> (string, coq_JSON -> ('a1, string) coq_ResultT) coq_Map ->
    coq_JSON -> ('a1, string) coq_ResultT **)

fun from_JSON_gen type_name cmap js =
  case coq_JSON_get_Object
         (String.^ type_name (String.^ type_sep type_string_constant)) js of
    Coq_errC e => Coq_errC e
  | Coq_resultC j =>
    (case j of
       JSON_String cons_name =>
       (case map_get coq_Eq_Class_ID_Type cons_name cmap of
          Some f => f js
        | None => Coq_errC err_str_json_unrecognized_constructor)
     | _ => Coq_errC err_str_json_no_constructor_name_string)

(** val coq_FWD_to_string : coq_FWD -> string **)

fun coq_FWD_to_string t = case t of
  REPLACE => replace_name_constant
| WRAP => wrap_name_constant
| UNWRAP => unwrap_name_constant
| EXTEND => extend_name_constant

(** val constructor_from_JSON :
    string -> (coq_JSON list -> ('a1, string) coq_ResultT) -> coq_JSON ->
    ('a1, string) coq_ResultT **)

fun constructor_from_JSON type_name f js =
  f (constructor_body_from_JSON_gen type_name js)

(** val coq_FWD_from_string : string -> (coq_FWD, string) coq_ResultT **)

fun coq_FWD_from_string s =
  case eqb coq_Eq_Class_ID_Type s replace_name_constant of
    True => Coq_resultC REPLACE
  | False =>
    (case eqb coq_Eq_Class_ID_Type s wrap_name_constant of
       True => Coq_resultC WRAP
     | False =>
       (case eqb coq_Eq_Class_ID_Type s unwrap_name_constant of
          True => Coq_resultC UNWRAP
        | False =>
          (case eqb coq_Eq_Class_ID_Type s extend_name_constant of
             True => Coq_resultC EXTEND
           | False => Coq_errC err_str_fwd_from_string)))

(** val coq_Stringifiable_FWD : coq_FWD coq_Stringifiable **)

val coq_Stringifiable_FWD : coq_FWD coq_Stringifiable =
  Build_Stringifiable coq_FWD_to_string coq_FWD_from_string

(** val coq_EvOutSig_to_JSON :
    nat coq_Jsonifiable -> coq_EvOutSig -> coq_JSON **)

fun coq_EvOutSig_to_JSON h t =
  let val type_const =
    String.^ ev_out_sig_name_constant (String.^ type_sep type_string_constant)
  in
  let val body_const =
    String.^ ev_out_sig_name_constant (String.^ type_sep body_string_constant)
  in
  (case t of
     OutN n =>
     JSON_Object ((type_const, (JSON_String
       outn_name_constant)) :: ((body_const,
       (let val Build_Jsonifiable to_JSON _ = h in to_JSON n end)) :: []))
   | OutUnwrap =>
     JSON_Object ((type_const, (JSON_String outunwrap_name_constant)) :: [])) end end

(** val coq_EvOutSig_from_JSON :
    nat coq_Jsonifiable -> coq_JSON -> (coq_EvOutSig, string) coq_ResultT **)

fun coq_EvOutSig_from_JSON h js =
  let val type_const =
    String.^ ev_out_sig_name_constant (String.^ type_sep type_string_constant)
  in
  (case coq_JSON_get_Object type_const js of
     Coq_errC e => Coq_errC e
   | Coq_resultC j =>
     (case j of
        JSON_String cons_name =>
        (case eqb coq_Eq_Class_ID_Type cons_name outunwrap_name_constant of
           True => Coq_resultC OutUnwrap
         | False =>
           (case eqb coq_Eq_Class_ID_Type cons_name outn_name_constant of
              True =>
              (case js of
                 JSON_Object m =>
                 (case m of
                    [] => Coq_errC err_str_json_parsing_outn
                  | _ :: l =>
                    (case l of
                       [] => Coq_errC err_str_json_parsing_outn
                     | p0 :: l0 =>
                       let val (_, n_js) = p0 in
                       (case l0 of
                          [] =>
                          res_bind
                            (let val Build_Jsonifiable _ from_JSON = h in
                             from_JSON n_js end) (fn n_js0 => Coq_resultC
                            (OutN n_js0))
                        | _ :: _ => Coq_errC err_str_json_parsing_outn) end))
               | _ => Coq_errC err_str_json_parsing_outn)
            | False => Coq_errC err_str_evoutsig_json_constructor))
      | _ => Coq_errC err_str_json_no_constructor_name_string)) end

(** val coq_Jsonifiable_EvOutSig :
    nat coq_Jsonifiable -> coq_EvOutSig coq_Jsonifiable **)

fun coq_Jsonifiable_EvOutSig h =
  Build_Jsonifiable (coq_EvOutSig_to_JSON h) (coq_EvOutSig_from_JSON h)

(** val coq_EvSig_to_JSON :
    coq_EvOutSig coq_Jsonifiable -> coq_FWD coq_Stringifiable -> coq_EvSig ->
    coq_JSON **)

fun coq_EvSig_to_JSON h h0 t = case t of
  Coq_ev_arrow fwd in_sig out_sig =>
  JSON_Object ((fwd_name_constant, (JSON_String
    (let val Build_Stringifiable to_string _ = h0 in to_string fwd end))) :: ((ev_in_sig_name_constant,
    (JSON_String
    (case in_sig of
       InAll => all_name_constant
     | InNone => none_name_constant))) :: ((ev_out_sig_name_constant,
    (let val Build_Jsonifiable to_JSON _ = h in to_JSON out_sig end)) :: [])))

(** val coq_EvSig_from_JSON :
    coq_EvOutSig coq_Jsonifiable -> coq_FWD coq_Stringifiable -> coq_JSON ->
    (coq_EvSig, string) coq_ResultT **)

fun coq_EvSig_from_JSON h h0 js =
  res_bind (coq_JSON_get_string fwd_name_constant js) (fn fwd_js =>
    res_bind (coq_JSON_get_string ev_in_sig_name_constant js)
      (fn in_sig_js =>
      res_bind (coq_JSON_get_Object ev_out_sig_name_constant js)
        (fn out_sig_js =>
        res_bind
          (let val Build_Stringifiable _ from_string = h0 in
           from_string fwd_js end) (fn fwd =>
          res_bind
            (case eqb coq_Eq_Class_ID_Type in_sig_js all_name_constant of
               True => Coq_resultC InAll
             | False =>
               (case eqb coq_Eq_Class_ID_Type in_sig_js none_name_constant of
                  True => Coq_resultC InNone
                | False => Coq_errC err_str_invalid_evinsig_json))
            (fn in_sig =>
            res_bind
              (let val Build_Jsonifiable _ from_JSON = h in
               from_JSON out_sig_js end) (fn out_sig => Coq_resultC
              (Coq_ev_arrow fwd in_sig out_sig)))))))

(** val coq_Jsonifiable_EvSig :
    coq_EvOutSig coq_Jsonifiable -> coq_FWD coq_Stringifiable -> coq_EvSig
    coq_Jsonifiable **)

fun coq_Jsonifiable_EvSig h h0 =
  Build_Jsonifiable (coq_EvSig_to_JSON h h0) (coq_EvSig_from_JSON h h0)

(** val coq_EvidenceT_to_JSON :
    nat coq_Jsonifiable -> coq_ASP_PARAMS coq_Jsonifiable -> coq_EvidenceT ->
    coq_JSON **)

fun coq_EvidenceT_to_JSON h h0 e = case e of
  Coq_mt_evt =>
  constructor_to_JSON evidencet_name_constant mt_name_constant []
| Coq_nonce_evt n =>
  constructor_to_JSON evidencet_name_constant nonce_evt_name_constant
    ((let val Build_Jsonifiable to_JSON _ = h in to_JSON n end) :: [])
| Coq_asp_evt plc ps e' =>
  constructor_to_JSON evidencet_name_constant asp_evt_name_constant
    ((JSON_String
    plc) :: ((let val Build_Jsonifiable to_JSON _ = h0 in to_JSON ps end) :: (
    (coq_EvidenceT_to_JSON h h0 e') :: [])))
| Coq_left_evt e' =>
  constructor_to_JSON evidencet_name_constant left_evt_name_constant
    ((coq_EvidenceT_to_JSON h h0 e') :: [])
| Coq_right_evt e' =>
  constructor_to_JSON evidencet_name_constant right_evt_name_constant
    ((coq_EvidenceT_to_JSON h h0 e') :: [])
| Coq_split_evt e1 e2 =>
  constructor_to_JSON evidencet_name_constant split_evt_name_constant
    ((coq_EvidenceT_to_JSON h h0 e1) :: ((coq_EvidenceT_to_JSON h h0 e2) :: []))

(** val coq_EvidenceT_from_JSON :
    nat coq_Jsonifiable -> coq_ASP_PARAMS coq_Jsonifiable -> coq_JSON ->
    (coq_EvidenceT, string) coq_ResultT **)

fun coq_EvidenceT_from_JSON h h0 js =
  case coq_JSON_get_Object
         (String.^ evidencet_name_constant
           (String.^ type_sep type_string_constant)) js of
    Coq_errC e => Coq_errC e
  | Coq_resultC j =>
    (case j of
       JSON_String cons_name =>
       (case eqb coq_Eq_Class_ID_Type cons_name mt_name_constant of
          True => Coq_resultC Coq_mt_evt
        | False =>
          (case eqb coq_Eq_Class_ID_Type cons_name nonce_evt_name_constant of
             True =>
             (case js of
                JSON_Object m =>
                (case m of
                   [] =>
                   Coq_errC err_str_json_parsing_failure_wrong_number_args
                 | _ :: l =>
                   (case l of
                      [] =>
                      Coq_errC err_str_json_parsing_failure_wrong_number_args
                    | p0 :: l0 =>
                      let val (_, n_js) = p0 in
                      (case l0 of
                         [] =>
                         res_bind
                           (let val Build_Jsonifiable _ from_JSON = h in
                            from_JSON n_js end) (fn n_js0 => Coq_resultC
                           (Coq_nonce_evt n_js0))
                       | _ :: _ =>
                         Coq_errC
                           err_str_json_parsing_failure_wrong_number_args) end))
              | _ => Coq_errC err_str_json_parsing_failure_wrong_number_args)
           | False =>
             (case eqb coq_Eq_Class_ID_Type cons_name asp_evt_name_constant of
                True =>
                (case js of
                   JSON_Object m =>
                   (case m of
                      [] =>
                      Coq_errC err_str_json_parsing_failure_wrong_number_args
                    | _ :: l =>
                      (case l of
                         [] =>
                         Coq_errC
                           err_str_json_parsing_failure_wrong_number_args
                       | p0 :: l0 =>
                         let val (_, j0) = p0 in
                         (case j0 of
                            JSON_Array l1 =>
                            (case l1 of
                               [] =>
                               Coq_errC
                                 err_str_json_parsing_failure_wrong_number_args
                             | j1 :: l2 =>
                               (case j1 of
                                  JSON_String plc =>
                                  (case l2 of
                                     [] =>
                                     Coq_errC
                                       err_str_json_parsing_failure_wrong_number_args
                                   | asp_par :: l3 =>
                                     (case l3 of
                                        [] =>
                                        Coq_errC
                                          err_str_json_parsing_failure_wrong_number_args
                                      | ev' :: l4 =>
                                        (case l4 of
                                           [] =>
                                           (case l0 of
                                              [] =>
                                              res_bind
                                                (let val Build_Stringifiable _
                                                   from_string =
                                                   coq_Stringifiable_ID_Type
                                                 in
                                                 from_string plc end)
                                                (fn plc0 =>
                                                res_bind
                                                  (let val Build_Jsonifiable _
                                                     from_JSON = h0
                                                   in
                                                   from_JSON asp_par end)
                                                  (fn asp_par0 =>
                                                  res_bind
                                                    (coq_EvidenceT_from_JSON
                                                      h h0 ev') (fn ev'0 =>
                                                    Coq_resultC (Coq_asp_evt
                                                    plc0 asp_par0 ev'0))))
                                            | _ :: _ =>
                                              Coq_errC
                                                err_str_json_parsing_failure_wrong_number_args)
                                         | _ :: _ =>
                                           Coq_errC
                                             err_str_json_parsing_failure_wrong_number_args)))
                                | _ =>
                                  Coq_errC
                                    err_str_json_parsing_failure_wrong_number_args))
                          | _ =>
                            Coq_errC
                              err_str_json_parsing_failure_wrong_number_args) end))
                 | _ =>
                   Coq_errC err_str_json_parsing_failure_wrong_number_args)
              | False =>
                (case eqb coq_Eq_Class_ID_Type cons_name
                        left_evt_name_constant of
                   True =>
                   (case js of
                      JSON_Object m =>
                      (case m of
                         [] =>
                         Coq_errC
                           err_str_json_parsing_failure_wrong_number_args
                       | _ :: l =>
                         (case l of
                            [] =>
                            Coq_errC
                              err_str_json_parsing_failure_wrong_number_args
                          | p0 :: l0 =>
                            let val (_, ev') = p0 in
                            (case l0 of
                               [] =>
                               res_bind (coq_EvidenceT_from_JSON h h0 ev')
                                 (fn ev'0 => Coq_resultC (Coq_left_evt ev'0))
                             | _ :: _ =>
                               Coq_errC
                                 err_str_json_parsing_failure_wrong_number_args) end))
                    | _ =>
                      Coq_errC err_str_json_parsing_failure_wrong_number_args)
                 | False =>
                   (case eqb coq_Eq_Class_ID_Type cons_name
                           right_evt_name_constant of
                      True =>
                      (case js of
                         JSON_Object m =>
                         (case m of
                            [] =>
                            Coq_errC
                              err_str_json_parsing_failure_wrong_number_args
                          | _ :: l =>
                            (case l of
                               [] =>
                               Coq_errC
                                 err_str_json_parsing_failure_wrong_number_args
                             | p0 :: l0 =>
                               let val (_, ev') = p0 in
                               (case l0 of
                                  [] =>
                                  res_bind (coq_EvidenceT_from_JSON h h0 ev')
                                    (fn ev'0 => Coq_resultC (Coq_right_evt
                                    ev'0))
                                | _ :: _ =>
                                  Coq_errC
                                    err_str_json_parsing_failure_wrong_number_args) end))
                       | _ =>
                         Coq_errC
                           err_str_json_parsing_failure_wrong_number_args)
                    | False =>
                      (case eqb coq_Eq_Class_ID_Type cons_name
                              split_evt_name_constant of
                         True =>
                         (case js of
                            JSON_Object m =>
                            (case m of
                               [] =>
                               Coq_errC
                                 err_str_json_parsing_failure_wrong_number_args
                             | _ :: l =>
                               (case l of
                                  [] =>
                                  Coq_errC
                                    err_str_json_parsing_failure_wrong_number_args
                                | p0 :: l0 =>
                                  let val (_, j0) = p0 in
                                  (case j0 of
                                     JSON_Array l1 =>
                                     (case l1 of
                                        [] =>
                                        Coq_errC
                                          err_str_json_parsing_failure_wrong_number_args
                                      | ev1 :: l2 =>
                                        (case l2 of
                                           [] =>
                                           Coq_errC
                                             err_str_json_parsing_failure_wrong_number_args
                                         | ev2 :: l3 =>
                                           (case l3 of
                                              [] =>
                                              (case l0 of
                                                 [] =>
                                                 res_bind
                                                   (coq_EvidenceT_from_JSON h
                                                     h0 ev1) (fn ev3 =>
                                                   res_bind
                                                     (coq_EvidenceT_from_JSON
                                                       h h0 ev2) (fn ev4 =>
                                                     Coq_resultC
                                                     (Coq_split_evt ev3 ev4)))
                                               | _ :: _ =>
                                                 Coq_errC
                                                   err_str_json_parsing_failure_wrong_number_args)
                                            | _ :: _ =>
                                              Coq_errC
                                                err_str_json_parsing_failure_wrong_number_args)))
                                   | _ =>
                                     Coq_errC
                                       err_str_json_parsing_failure_wrong_number_args) end))
                          | _ =>
                            Coq_errC
                              err_str_json_parsing_failure_wrong_number_args)
                       | False =>
                         Coq_errC err_str_json_invalid_constructor_name))))))
     | _ => Coq_errC err_str_json_no_constructor_name_string)

(** val coq_Jsonifiable_EvidenceT :
    coq_ASP_ARGS coq_Jsonifiable -> nat coq_Jsonifiable -> coq_ASP_PARAMS
    coq_Jsonifiable -> coq_EvidenceT coq_Jsonifiable **)

fun coq_Jsonifiable_EvidenceT _ h0 h1 =
  Build_Jsonifiable (coq_EvidenceT_to_JSON h0 h1)
    (coq_EvidenceT_from_JSON h0 h1)

(** val coq_Stringifiable_SP : coq_SP coq_Stringifiable **)

val coq_Stringifiable_SP : coq_SP coq_Stringifiable =
  Build_Stringifiable (fn sp =>
    case sp of
      ALL => all_name_constant
    | NONE => none_name_constant) (fn s =>
    case eqb coq_Eq_Class_ID_Type s all_name_constant of
      True => Coq_resultC ALL
    | False =>
      (case eqb coq_Eq_Class_ID_Type s none_name_constant of
         True => Coq_resultC NONE
       | False => Coq_errC err_str_json_parsing_SP))

(** val coq_ASP_to_JSON :
    coq_Plc coq_Stringifiable -> coq_ASP_ARGS coq_Jsonifiable -> coq_ASP ->
    coq_JSON **)

fun coq_ASP_to_JSON h h0 t = case t of
  NULL => constructor_to_JSON coq_STR_ASP null_name_constant []
| ASPC ps =>
  constructor_to_JSON coq_STR_ASP aspc_name_constant
    ((let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_Params h0 in
      to_JSON ps end) :: [])
| SIG => constructor_to_JSON coq_STR_ASP sig_name_constant []
| HSH => constructor_to_JSON coq_STR_ASP hsh_name_constant []
| APPR => constructor_to_JSON coq_STR_ASP appr_name_constant []
| ENC q =>
  constructor_to_JSON coq_STR_ASP enc_name_constant ((JSON_String
    (let val Build_Stringifiable to_string _ = h in to_string q end)) :: [])

(** val coq_ASP_from_JSON_map :
    coq_Plc coq_Stringifiable -> coq_ASP_ARGS coq_Jsonifiable -> (string,
    coq_JSON -> (coq_ASP, string) coq_ResultT) coq_Map **)

fun coq_ASP_from_JSON_map h h0 =
  (null_name_constant,
    (constructor_from_JSON coq_STR_ASP (fn _ => Coq_resultC NULL))) :: ((appr_name_constant,
    (constructor_from_JSON coq_STR_ASP (fn _ => Coq_resultC APPR))) :: ((aspc_name_constant,
    (constructor_from_JSON coq_STR_ASP (fn ljs =>
      case ljs of
        [] => Coq_errC err_str_json_parsing_ASPC
      | ps_js :: l =>
        (case l of
           [] =>
           res_bind
             (let val Build_Jsonifiable _ from_JSON =
                coq_Jsonifiable_ASP_Params h0
              in
              from_JSON ps_js end) (fn ps => Coq_resultC (ASPC ps))
         | _ :: _ => Coq_errC err_str_json_parsing_ASPC)))) :: ((sig_name_constant,
    (constructor_from_JSON coq_STR_ASP (fn _ => Coq_resultC SIG))) :: ((hsh_name_constant,
    (constructor_from_JSON coq_STR_ASP (fn _ => Coq_resultC HSH))) :: ((enc_name_constant,
    (constructor_from_JSON coq_STR_ASP (fn ljs =>
      case ljs of
        [] => Coq_errC err_str_json_parsing_failure_wrong_number_args
      | j :: l =>
        (case j of
           JSON_String n_js =>
           (case l of
              [] =>
              res_bind
                (let val Build_Stringifiable _ from_string = h in
                 from_string n_js end) (fn n => Coq_resultC (ENC n))
            | _ :: _ =>
              Coq_errC err_str_json_parsing_failure_wrong_number_args)
         | _ => Coq_errC err_str_json_parsing_failure_wrong_number_args)))) :: [])))))

(** val coq_ASP_from_JSON :
    coq_ASP_ARGS coq_Jsonifiable -> coq_JSON -> (coq_ASP, string) coq_ResultT **)

fun coq_ASP_from_JSON h js =
  from_JSON_gen coq_STR_ASP
    (coq_ASP_from_JSON_map coq_Stringifiable_ID_Type h) js

(** val coq_Jsonifiable_ASP :
    coq_ASP_ARGS coq_Jsonifiable -> coq_ASP coq_Jsonifiable **)

fun coq_Jsonifiable_ASP h =
  Build_Jsonifiable (coq_ASP_to_JSON coq_Stringifiable_ID_Type h)
    (coq_ASP_from_JSON h)

(** val coq_Jsonifiable_Split : coq_Split coq_Jsonifiable **)

val coq_Jsonifiable_Split : coq_Split coq_Jsonifiable =
  Build_Jsonifiable (fn pat =>
    let val (s1, s2) = pat in
    JSON_Object ((split1_name_constant, (JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_SP in
     to_string s1 end))) :: ((split2_name_constant, (JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_SP in
     to_string s2 end))) :: [])) end) (fn js =>
    case coq_JSON_get_string split1_name_constant js of
      Coq_errC _ => Coq_errC err_str_json_parsing_failure_wrong_number_args
    | Coq_resultC s1 =>
      (case coq_JSON_get_string split2_name_constant js of
         Coq_errC _ => Coq_errC err_str_json_parsing_failure_wrong_number_args
       | Coq_resultC s2 =>
         res_bind
           (let val Build_Stringifiable _ from_string = coq_Stringifiable_SP
            in
            from_string s1 end) (fn s3 =>
           res_bind
             (let val Build_Stringifiable _ from_string = coq_Stringifiable_SP
              in
              from_string s2 end) (fn s4 => Coq_resultC (s3, s4)))))

(** val coq_Term_to_JSON :
    coq_ASP coq_Jsonifiable -> coq_Split coq_Jsonifiable -> coq_Term ->
    coq_JSON **)

fun coq_Term_to_JSON h h0 t = case t of
  Coq_asp a =>
  constructor_to_JSON coq_STR_TERM asp_name_constant
    ((let val Build_Jsonifiable to_JSON _ = h in to_JSON a end) :: [])
| Coq_att p t' =>
  constructor_to_JSON coq_STR_TERM att_name_constant ((JSON_String
    (let val Build_Stringifiable to_string _ = coq_Stringifiable_ID_Type in
     to_string p end)) :: ((coq_Term_to_JSON h h0 t') :: []))
| Coq_lseq t1 t2 =>
  constructor_to_JSON coq_STR_TERM lseq_name_constant
    ((coq_Term_to_JSON h h0 t1) :: ((coq_Term_to_JSON h h0 t2) :: []))
| Coq_bseq sp t1 t2 =>
  constructor_to_JSON coq_STR_TERM bseq_name_constant
    ((let val Build_Jsonifiable to_JSON _ = h0 in to_JSON sp end) :: (
    (coq_Term_to_JSON h h0 t1) :: ((coq_Term_to_JSON h h0 t2) :: [])))
| Coq_bpar sp t1 t2 =>
  constructor_to_JSON coq_STR_TERM bpar_name_constant
    ((let val Build_Jsonifiable to_JSON _ = h0 in to_JSON sp end) :: (
    (coq_Term_to_JSON h h0 t1) :: ((coq_Term_to_JSON h h0 t2) :: [])))

(** val coq_Term_from_JSON :
    coq_ASP coq_Jsonifiable -> coq_Split coq_Jsonifiable -> coq_JSON ->
    (coq_Term, string) coq_ResultT **)

fun coq_Term_from_JSON h h0 js =
  let val type_str =
    String.^ coq_STR_TERM (String.^ type_sep type_string_constant)
  in
  let val body_str =
    String.^ coq_STR_TERM (String.^ type_sep body_string_constant)
  in
  (case coq_JSON_get_Object type_str js of
     Coq_errC e => Coq_errC e
   | Coq_resultC j =>
     (case j of
        JSON_String cons_name =>
        (case eqb coq_Eq_Class_ID_Type cons_name asp_name_constant of
           True =>
           res_bind (coq_JSON_get_Object body_str js) (fn asp_js =>
             res_bind
               (let val Build_Jsonifiable _ from_JSON = h in
                from_JSON asp_js end) (fn asp_val => Coq_resultC (Coq_asp
               asp_val)))
         | False =>
           (case eqb coq_Eq_Class_ID_Type cons_name att_name_constant of
              True =>
              (case js of
                 JSON_Object m =>
                 (case m of
                    [] =>
                    Coq_errC err_str_json_parsing_failure_wrong_number_args
                  | _ :: l =>
                    (case l of
                       [] =>
                       Coq_errC err_str_json_parsing_failure_wrong_number_args
                     | p0 :: l0 =>
                       let val (_, j0) = p0 in
                       (case j0 of
                          JSON_Array l1 =>
                          (case l1 of
                             [] =>
                             Coq_errC
                               err_str_json_parsing_failure_wrong_number_args
                           | j1 :: l2 =>
                             (case j1 of
                                JSON_String plc =>
                                (case l2 of
                                   [] =>
                                   Coq_errC
                                     err_str_json_parsing_failure_wrong_number_args
                                 | term' :: l3 =>
                                   (case l3 of
                                      [] =>
                                      (case l0 of
                                         [] =>
                                         res_bind
                                           (let val Build_Stringifiable _
                                              from_string =
                                              coq_Stringifiable_ID_Type
                                            in
                                            from_string plc end)
                                           (fn plc_val =>
                                           res_bind
                                             (coq_Term_from_JSON h h0 term')
                                             (fn term_val => Coq_resultC
                                             (Coq_att plc_val term_val)))
                                       | _ :: _ =>
                                         Coq_errC
                                           err_str_json_parsing_failure_wrong_number_args)
                                    | _ :: _ =>
                                      Coq_errC
                                        err_str_json_parsing_failure_wrong_number_args))
                              | _ =>
                                Coq_errC
                                  err_str_json_parsing_failure_wrong_number_args))
                        | _ =>
                          Coq_errC
                            err_str_json_parsing_failure_wrong_number_args) end))
               | _ => Coq_errC err_str_json_parsing_failure_wrong_number_args)
            | False =>
              (case eqb coq_Eq_Class_ID_Type cons_name lseq_name_constant of
                 True =>
                 (case js of
                    JSON_Object m =>
                    (case m of
                       [] =>
                       Coq_errC err_str_json_parsing_failure_wrong_number_args
                     | _ :: l =>
                       (case l of
                          [] =>
                          Coq_errC
                            err_str_json_parsing_failure_wrong_number_args
                        | p0 :: l0 =>
                          let val (_, j0) = p0 in
                          (case j0 of
                             JSON_Array l1 =>
                             (case l1 of
                                [] =>
                                Coq_errC
                                  err_str_json_parsing_failure_wrong_number_args
                              | term1 :: l2 =>
                                (case l2 of
                                   [] =>
                                   Coq_errC
                                     err_str_json_parsing_failure_wrong_number_args
                                 | term2 :: l3 =>
                                   (case l3 of
                                      [] =>
                                      (case l0 of
                                         [] =>
                                         res_bind
                                           (coq_Term_from_JSON h h0 term1)
                                           (fn term1_val =>
                                           res_bind
                                             (coq_Term_from_JSON h h0 term2)
                                             (fn term2_val => Coq_resultC
                                             (Coq_lseq term1_val term2_val)))
                                       | _ :: _ =>
                                         Coq_errC
                                           err_str_json_parsing_failure_wrong_number_args)
                                    | _ :: _ =>
                                      Coq_errC
                                        err_str_json_parsing_failure_wrong_number_args)))
                           | _ =>
                             Coq_errC
                               err_str_json_parsing_failure_wrong_number_args) end))
                  | _ =>
                    Coq_errC err_str_json_parsing_failure_wrong_number_args)
               | False =>
                 (case eqb coq_Eq_Class_ID_Type cons_name bseq_name_constant of
                    True =>
                    (case js of
                       JSON_Object m =>
                       (case m of
                          [] =>
                          Coq_errC
                            err_str_json_parsing_failure_wrong_number_args
                        | _ :: l =>
                          (case l of
                             [] =>
                             Coq_errC
                               err_str_json_parsing_failure_wrong_number_args
                           | p0 :: l0 =>
                             let val (_, j0) = p0 in
                             (case j0 of
                                JSON_Array l1 =>
                                (case l1 of
                                   [] =>
                                   Coq_errC
                                     err_str_json_parsing_failure_wrong_number_args
                                 | sp :: l2 =>
                                   (case l2 of
                                      [] =>
                                      Coq_errC
                                        err_str_json_parsing_failure_wrong_number_args
                                    | term1 :: l3 =>
                                      (case l3 of
                                         [] =>
                                         Coq_errC
                                           err_str_json_parsing_failure_wrong_number_args
                                       | term2 :: l4 =>
                                         (case l4 of
                                            [] =>
                                            (case l0 of
                                               [] =>
                                               res_bind
                                                 (let val Build_Jsonifiable _
                                                    from_JSON = h0
                                                  in
                                                  from_JSON sp end)
                                                 (fn sp_val =>
                                                 res_bind
                                                   (coq_Term_from_JSON h h0
                                                     term1) (fn term1_val =>
                                                   res_bind
                                                     (coq_Term_from_JSON h h0
                                                       term2)
                                                     (fn term2_val =>
                                                     Coq_resultC (Coq_bseq
                                                     sp_val term1_val
                                                     term2_val))))
                                             | _ :: _ =>
                                               Coq_errC
                                                 err_str_json_parsing_failure_wrong_number_args)
                                          | _ :: _ =>
                                            Coq_errC
                                              err_str_json_parsing_failure_wrong_number_args))))
                              | _ =>
                                Coq_errC
                                  err_str_json_parsing_failure_wrong_number_args) end))
                     | _ =>
                       Coq_errC err_str_json_parsing_failure_wrong_number_args)
                  | False =>
                    (case eqb coq_Eq_Class_ID_Type cons_name
                            bpar_name_constant of
                       True =>
                       (case js of
                          JSON_Object m =>
                          (case m of
                             [] =>
                             Coq_errC
                               err_str_json_parsing_failure_wrong_number_args
                           | _ :: l =>
                             (case l of
                                [] =>
                                Coq_errC
                                  err_str_json_parsing_failure_wrong_number_args
                              | p0 :: l0 =>
                                let val (_, j0) = p0 in
                                (case j0 of
                                   JSON_Array l1 =>
                                   (case l1 of
                                      [] =>
                                      Coq_errC
                                        err_str_json_parsing_failure_wrong_number_args
                                    | sp :: l2 =>
                                      (case l2 of
                                         [] =>
                                         Coq_errC
                                           err_str_json_parsing_failure_wrong_number_args
                                       | term1 :: l3 =>
                                         (case l3 of
                                            [] =>
                                            Coq_errC
                                              err_str_json_parsing_failure_wrong_number_args
                                          | term2 :: l4 =>
                                            (case l4 of
                                               [] =>
                                               (case l0 of
                                                  [] =>
                                                  res_bind
                                                    (let val Build_Jsonifiable _
                                                       from_JSON = h0
                                                     in
                                                     from_JSON sp end)
                                                    (fn sp_val =>
                                                    res_bind
                                                      (coq_Term_from_JSON h
                                                        h0 term1)
                                                      (fn term1_val =>
                                                      res_bind
                                                        (coq_Term_from_JSON h
                                                          h0 term2)
                                                        (fn term2_val =>
                                                        Coq_resultC (Coq_bpar
                                                        sp_val term1_val
                                                        term2_val))))
                                                | _ :: _ =>
                                                  Coq_errC
                                                    err_str_json_parsing_failure_wrong_number_args)
                                             | _ :: _ =>
                                               Coq_errC
                                                 err_str_json_parsing_failure_wrong_number_args))))
                                 | _ =>
                                   Coq_errC
                                     err_str_json_parsing_failure_wrong_number_args) end))
                        | _ =>
                          Coq_errC
                            err_str_json_parsing_failure_wrong_number_args)
                     | False => Coq_errC err_str_json_invalid_constructor_name)))))
      | _ => Coq_errC err_str_json_invalid_constructor_name)) end end

(** val coq_Jsonifiable_Term :
    coq_ASP coq_Jsonifiable -> coq_Split coq_Jsonifiable -> coq_Term
    coq_Jsonifiable **)

fun coq_Jsonifiable_Term h h0 =
  Build_Jsonifiable (coq_Term_to_JSON h h0) (coq_Term_from_JSON h h0)

(** val coq_Jsonifiable_RawEv : coq_RawEv coq_Jsonifiable **)

val coq_Jsonifiable_RawEv : coq_RawEv coq_Jsonifiable =
  Build_Jsonifiable (fn ev => JSON_Object ((rawev_name_constant, (JSON_Array
    (map (fn bs => JSON_String
      (let val Build_Stringifiable to_string _ = coq_Stringifiable_BS in
       to_string bs end)) ev))) :: [])) (fn js =>
    case coq_JSON_get_Array rawev_name_constant js of
      Coq_errC e => Coq_errC e
    | Coq_resultC js' =>
      result_map (fn js'0 =>
        case js'0 of
          JSON_String s =>
          let val Build_Stringifiable _ from_string = coq_Stringifiable_BS in
          from_string s end
        | _ => Coq_errC err_str_json_invalid_constructor_name) js')

(** val coq_Jsonifiable_Evidence :
    coq_RawEv coq_Jsonifiable -> coq_EvidenceT coq_Jsonifiable ->
    coq_Evidence coq_Jsonifiable **)

fun coq_Jsonifiable_Evidence h h0 =
  Build_Jsonifiable (fn e =>
    let val Coq_evc r et = e in
    JSON_Array
    ((let val Build_Jsonifiable to_JSON _ = h in to_JSON r end) :: ((
                                                                    let val Build_Jsonifiable to_JSON
                                                                    _ = h0
                                                                    in
                                                                    to_JSON et end) :: [])) end)
    (fn j =>
    case j of
      JSON_Array l =>
      (case l of
         [] => Coq_errC err_str_invalid_evidence_json
       | r_js :: l0 =>
         (case l0 of
            [] => Coq_errC err_str_invalid_evidence_json
          | et_js :: l1 =>
            (case l1 of
               [] =>
               res_bind
                 (let val Build_Jsonifiable _ from_JSON = h in
                  from_JSON r_js end) (fn r =>
                 res_bind
                   (let val Build_Jsonifiable _ from_JSON = h0 in
                    from_JSON et_js end) (fn et => Coq_resultC (Coq_evc r et)))
             | _ :: _ => Coq_errC err_str_invalid_evidence_json)))
    | _ => Coq_errC err_str_invalid_evidence_json)

(** val coq_Jsonifiable_GlobalContext :
    coq_ASP_ID coq_Stringifiable -> (coq_ASP_ID, coq_ASP_ID) coq_Map
    coq_Jsonifiable -> coq_ASP_Type_Env coq_Jsonifiable -> coq_GlobalContext
    coq_Jsonifiable **)

fun coq_Jsonifiable_GlobalContext _ h0 h1 =
  Build_Jsonifiable (fn g => JSON_Object ((asp_types_name_constant,
    (let val Build_Jsonifiable to_JSON _ = h1 in
     to_JSON (let val Build_GlobalContext asp_types _ = g in asp_types end) end)) :: ((asp_comps_name_constant,
    (let val Build_Jsonifiable to_JSON _ = h0 in
     to_JSON (let val Build_GlobalContext _ asp_comps = g in asp_comps end) end)) :: [])))
    (fn j =>
    res_bind (coq_JSON_get_Object asp_types_name_constant j) (fn ats =>
      res_bind (coq_JSON_get_Object asp_comps_name_constant j) (fn acs =>
        res_bind
          (let val Build_Jsonifiable _ from_JSON = h1 in from_JSON ats end)
          (fn ats0 =>
          res_bind
            (let val Build_Jsonifiable _ from_JSON = h0 in from_JSON acs end)
            (fn acs0 => Coq_resultC (Build_GlobalContext ats0 acs0))))))
